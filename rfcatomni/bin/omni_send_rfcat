#!/usr/bin/env python2

# Try requesting status like this:
# ./omni_send_rfcat 1f01482a 12 00 0e0100

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

from rflib import RfCat, keystop, ChipconUsbTimeoutException
import argparse
import openomni.rf
from openomni.packet import Packet, PacketType
from openomni.message import Message
import datetime
import time
import sys

def send_packet(device, packet):
    # Prepend preamble bytes
    preamble_length = 235   # 324 is full amount, but rfcat errors if total length is > 255
    sync_word = "3c"
    packet_prefix = (("ab" * preamble_length) + sync_word).decode("hex")
    full_data = packet_prefix + packet.tx_data()

    # Turn off modem preamble and syncword since we are doing our own
    openomni.rf.disable_preamble(device)

    # Send data
    #print("Raw data: %s" % full_data.encode('hex'))
    outgoing_data = Packet.flip_bytes(full_data)
    #print("outgoing data: %s" % outgoing_data.encode('hex'))
    device.RFxmit(outgoing_data)

    # Restore modem preamble and syncword
    openomni.rf.enable_preamble(device)

def send_message(device, pod_id, seq, byte9, body_hex):

    body = body_hex.decode("hex")
    msg = Message(pod_id, byte9, body)
    for packet in msg.packetize(seq):
        #print("%s" % packet)
        send_packet(device, packet)
        packet.received_at = datetime.datetime.now()
        packet = recv_message(device)
        print("%s" % packet)


def send_ack(device, pod_id, seq):
    packet = Packet()
    packet.pod_address_1 = pod_id
    packet.sequence = seq
    packet.pod_address_2 = pod_id
    packet.packet_type = PacketType.ACK
    send_packet(device, packet)


def recv_message(d):
    while not keystop():
        try:
            pkt, ts = d.RFrecv()
            pkt = Packet.flip_bytes(pkt)
            rcv_time = datetime.datetime.now()

            x = 0
            while x < len(pkt):
                packet = Packet(pkt[:len(pkt) - (x + 1)])
                packet.received_at = rcv_time
                if packet.is_valid():
                    # print packet.data.encode("hex")
                    return packet
                x += 1

        except ChipconUsbTimeoutException:
            time.sleep(0.5)

    sys.stdin.read(1)


def main(options=None):

    parser = argparse.ArgumentParser(description="Send status packet to POD using rfcat.")
    parser.add_argument("pod_id", help="the pod id", type=str)
    parser.add_argument("last_seq", help="last sequence number used in comms", type=int)
    parser.add_argument("last_b9", help="last byte9 values used in comms (in hexadecimal)", type=str)
    parser.add_argument("body", help="body of packet in hexadecimal", type=str)

    args = parser.parse_args()

    d = RfCat(0, debug=False)
    openomni.rf.configure_rfcat(d)

    last_b9 = int(args.last_b9, 16)
    last_seq = int(args.last_seq)

    last_seq = int(last_seq)
    byte9 = (((last_b9 >> 2) + 1) & 0b1111) << 2
    seq = (last_seq + 1) & 0b11111

    send_message(d, pod_id=args.pod_id, seq=seq, byte9=byte9,
                body_hex=args.body)

    packet = recv_message(d)
    print(packet)

    if packet.packet_type == PacketType.POD:
        send_ack(d, args.pod_id, seq + 2)
    else:
        print("Missed response")

    packet = recv_message(d)



if __name__ == "__main__":
    main()
