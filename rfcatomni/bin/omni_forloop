#!/usr/bin/env python2

"Spams requests, validate-reads and forwards response using 2 rfcat radios"

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

from rflib import RfCat, ChipconUsbTimeoutException
import time
import datetime
import argparse
import openomni.rf
from openomni.packet import Packet, PacketType
from multiprocessing import Process, Queue, Event
import logging
import copy
import atexit
from Queue import Empty


def watch_packets(rfcatidx,
                  sawq,
                  responseq,
                  rfcatdebug=False):
    log = logging.getLogger("sniff_packets@{}".format(rfcatidx))
    log.debug("opening device")
    # will spin forever without a device
    device = RfCat(rfcatidx, debug=rfcatdebug)
    log.debug("configuring device")
    openomni.rf.configure_rfcat(device)
    log.info("device configured, capturing packets")
    while True:
        try:
            pkt, ts = device.RFrecv(timeout=80000)
            pkt = Packet.flip_bytes(pkt)
            x = 0
            while x < len(pkt):
                packet = Packet(pkt[:len(pkt) - (x + 1)])
                packet.received_at = datetime.datetime.fromtimestamp(ts)
                if packet.is_valid():
                    log.debug("found valid packet at offset {}, passing"
                              .format(x))
                    item = (rfcatidx, packet)
                    # TODO: check for relevance
                    if packet.message_type == PacketType.PDM:
                        # just assume it's us for now
                        sawq.put(item)
                    elif packet.message_type == PacketType.POD:
                        # holy shit!
                        responseq.put(item)
                x += 1
        except ChipconUsbTimeoutException:
            log.debug("nuisance usb timeout, retrying")
            time.sleep(0.1)


def spew_packets(rfcatidx,
                 packet_tmpl,
                 spew,
                 weps,
                 sawq,
                 responseq,
                 timeout,
                 rfcatdebug=False):
    """send the same packet over and over.
            packet_tmpl is an important pre-filled packet object
            trigger is an external Event to move on to the next packet
            sawq - given (idx, packet) when the reader sees a packet we spewed
            ackq - given (idx, packet) when the reader sees
            timeout
            rfcatdebug - for spaaaam
    """
    log = logging.getLogger("spew_packets@{}".format(rfcatidx))
    log.debug("opening device")
    device = RfCat(rfcatidx, debug=rfcatdebug)
    log.debug("configuring device")
    openomni.rf.configure_rfcat(device)
    # transmitting uses its own syncword
    openomni.rf.disable_preamble(device)
    packet = copy.copy(packet_tmpl)
    seqstart = packet.sequence

    # preamble bytes
    preamble_length = 235   # 324 is full amount, but rfcat errors if total length is > 255
    sync_word = "3c"
    packet_prefix = (("ab" * preamble_length) + sync_word).decode("hex")

    while spew.wait():
        attempt = 0
        # send this sequence until clear
        xmitdata = Packet.flip_bytes(packet_prefix + packet.tx_data())
        complete = False
        while not complete:
            attempt += 1
            device.RFxmit(xmitdata)
            seent = None
            try:
                seent = sawq.get(timeout=timeout)
            except Empty:
                log.info("attempt {} of seq {} not seen in time"
                         .format(attempt, packet.sequence))
            else:
                log.debug("attempt {} of seq {} seent"
                          .format(attempt, packet.sequence))

            victory = False
            try:
                victory = responseq.get(timeout=timeout)
            except Empty:
                log.info("attempt {} of seq {} not responded to"
                         .format(attempt, packet.sequence))

            if victory:
                # move the sequence forward from the POD's response
                packet.sequence += 1
                # send an ack here someday
                # which should move the pod's
                # expected sequence forward

                # move the sequence forward from our ACK
                packet.sequence += 1

                complete = True
                weps.set()


def main(options=None):
    parser = argparse.ArgumentParser(description="Omnipod status checker")
    parser.add_argument("--debug",
                        action="store_true",
                        help="enable debug messages")
    parser.add_argument("--rfcatdebug",
                        action="store_true",
                        help="enable spammy rfcat debug messages")
    parser.add_argument("--recvidx",
                        type=int,
                        default=0,
                        help="device index of the recieving radio (default 0)")
    parser.add_argument("--sendidx",
                        "--xmitidx",
                        type=int,
                        default=1,
                        help="device index of the sending radio (default 1)")
    parser.add_argument("--addr",
                        help="the pod id (default 13371337)",
                        type=str,
                        default="13371337")
    parser.add_argument("--seq",
                        help="starting sequence number (default 0)",
                        type=int,
                        default=0)
    parser.add_argument("--byte9",
                        help="byte9 value in hex (default ff)",
                        type=str,
                        default="ff")
    parser.add_argument("--body",
                        help="body of packet in hexadecimal (default 0000ce)",
                        type=str,
                        default="0000ce")
    parser.add_argument("--timeout",
                        help="RF timeout in float-seconds (default 1.0)",
                        type=float,
                        default=1.0)
    parser.add_argument("--message-type",
                        help="message type value in hex (default 0e01)",
                        type=str,
                        default="0e01")

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    log = logging.getLogger("main")

    packet_tmpl = Packet()
    packet_tmpl.pod_address_1 = args.addr
    packet_tmpl.pod_address_2 = args.addr
    packet_tmpl.packet_type = PacketType.PDM
    packet_tmpl.sequence = args.seq
    packet_tmpl.byte9 = ord(args.byte9.decode("hex"))
    packet_tmpl.body = args.body
    packet_tmpl.body_len = len(args.body)
    packet_tmpl.message_type = args.message_type.decode("hex")

    sawq = Queue()
    responseq = Queue()
    spew = Event()
    weps = Event()

    log.info("starting watcher on idx {}"
             .format(args.recvidx))
    watcher = Process(target=watch_packets,
                      name="watch_packets:{}".format(args.recvidx),
                      args=(args.recvidx, sawq, responseq))
    watcher.start()

    log.info("starting spewer on idx {}"
             .format(args.sendidx))
    spewer = Process(target=spew_packets,
                     name="spew_packets:{}".format(args.sendidx),
                     args=(args.sendidx,
                           packet_tmpl,
                           spew,
                           weps,
                           sawq,
                           responseq,
                           args.timeout))
    spewer.start()

    def terminate():
        if watcher.is_alive():
            watcher.terminate()
        if spewer.is_alive():
            spewer.terminate()

    atexit.register(terminate)

    try:
        # tell the spewer to spew
        spew.set()
        # wait forever for reverse signal
        while weps.wait():
            pass
    except KeyboardInterrupt:
        log.info("Terminating...")
        terminate()


if __name__ == "__main__":
    main()
